#ifndef __AUTOGENERATED_ROBOT_CONFIGURATION__
#define __AUTOGENERATED_ROBOT_CONFIGURATION__

#include <vector>
#include <string>
#include <Eigen/Dense>
#include <ceres/ceres.h>
#include <hpp/fcl/shape/geometric_shapes.h>

using namespace ceres;

using hpp::fcl::CollisionObject;
// supported collision shapes:
using hpp::fcl::Box;
using hpp::fcl::Sphere;
using hpp::fcl::Capsule;
using hpp::fcl::Cylinder;
using hpp::fcl::Plane;

namespace robot
{

// Util
template<typename T>
CollisionObject* inflatedCollisionObject(const T &shape, double inflation)
{
  if (inflation <= 0) return new CollisionObject(std::make_shared<T>(shape));
  return new CollisionObject(std::make_shared<T>(shape.inflated(inflation).first));
}

// Constants
const int endpoint_link_idx = 43;
const int num_joints = 61;
const int num_variables = 20;
const int num_links = 61;
const int num_objects = 62;
const int num_acm_link_pairs = 418;
const int num_targets = 6;

// Mapping vectors
const int joint_idx_to_variable_idx[61] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,-1,-1,-1,-1,-1,7,8,9,10,11,12,13,-1,-1,-1,-1,-1,-1,14,15,16,17,18,19,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}; // -1 if no variable available. Can be used as joint_has_variable vector
const int variable_idx_to_joint_idx[20] = {12,13,14,15,16,17,18,24,25,26,27,28,29,30,37,38,39,40,41,42};
const int joint_idx_to_target_idx[61] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
const int target_idx_to_joint_idx[6] = {37,38,39,40,41,42};
const int object_idx_to_link_idx[62] = {36,36,36,37,37,38,38,38,38,38,38,39,39,39,40,40,40,40,40,41,42,42,11,11,11,13,13,13,13,14,14,14,15,15,15,15,16,16,17,17,18,18,23,23,23,25,25,25,25,26,26,26,27,27,27,27,28,28,29,29,30,30};

// Joint info
const std::string joint_names[61] = {"ASSUMED_FIXED_ROOT_JOINT","base_link_joint","base_control_joint","base_link_to_cam0","base_link_to_cam1","base_link_to_cam2","base_link_to_cam3","base_link_to_tracker","power_joint","trolley_platform_joint","arm_holder_joint","arm_left_world_joint","arm_left_joint1","arm_left_joint2","arm_left_joint3","arm_left_joint4","arm_left_joint5","arm_left_joint6","arm_left_joint7","arm_left_ft_joint","arm_left_gripper_joint","arm_left_eef_joint","arm_left_joint_eef","arm_right_world_joint","arm_right_joint1","arm_right_joint2","arm_right_joint3","arm_right_joint4","arm_right_joint5","arm_right_joint6","arm_right_joint7","arm_right_ft_joint","arm_right_gripper_joint","arm_right_eef_joint","arm_right_joint_eef","head_mount_joint","head_world_joint","head_joint1","head_joint2","head_joint3","head_joint4","head_joint5","head_joint6","head_joint_eef","zed2i_holder_joint","zed2i_base_joint","zed2i_camera_center_joint","zed2i_baro_joint","zed2i_left_camera_joint","zed2i_left_camera_optical_joint","zed2i_temp_left_joint","zed2i_mag_joint","zed2i_right_camera_joint","zed2i_right_camera_optical_joint","zed2i_temp_right_joint","zed2i_joint","arm_left_controller_joint","arm_right_controller_joint","basket_joint","trolley_back_joint","trolley_local_joint"};
const int joint_axis[61] = {0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,3,3,3,3,3,3,3,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const int joint_child_link_idx[61] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60};
const int joint_parent_link_idx[61] = {-1,0,1,1,1,1,1,1,1,1,9,10,11,12,13,14,15,16,17,18,19,20,18,10,23,24,25,26,27,28,29,30,31,32,30,10,35,36,37,38,39,40,41,42,43,44,45,46,46,48,48,46,46,52,52,44,9,9,9,9,9}; // -1 if no link available
const int joint_is_position_bounded[61] = {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; // bool
const double joint_preferred_position[61] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.500088,0.000000,0.680088,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.500088,0.000000,0.680088,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,2.587451,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const double joint_max_position[61] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.110177,2.180000,3.110177,3.110177,3.110177,3.110177,3.110177,0.000000,0.000000,0.000000,0.000000,0.000000,3.110177,2.180000,3.110177,3.110177,3.110177,3.110177,3.110177,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,6.283185,2.617990,5.235988,6.283185,2.164200,6.283185,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const double joint_min_position[61] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-3.110177,-2.180000,-3.110177,-0.110000,-3.110177,-1.750000,-3.110177,0.000000,0.000000,0.000000,0.000000,0.000000,-3.110177,-2.180000,-3.110177,-0.110000,-3.110177,-1.750000,-3.110177,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-6.283185,-2.617990,-0.061087,-6.283185,-2.164200,-6.283185,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const int joint_is_velocity_bounded[61] = {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; // bool
const double joint_max_velocity[61] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const double joint_min_velocity[61] = {};
const int joint_is_acceleration_bounded[61] = {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; // bool
const double joint_max_acceleration[61] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const double joint_min_acceleration[61] = {};

// Link info
const std::string link_names[61] = {"world","trolley_base_link","base_control_link","camera0_link","camera1_link","camera2_link","camera3_link","tracker","power_link","trolley_platform_link","arm_holder_link","arm_left_link_base","arm_left_link1","arm_left_link2","arm_left_link3","arm_left_link4","arm_left_link5","arm_left_link6","arm_left_link7","arm_left_ft_link","arm_left_gripper_link","arm_left_eef_link","arm_left_link_eef","arm_right_link_base","arm_right_link1","arm_right_link2","arm_right_link3","arm_right_link4","arm_right_link5","arm_right_link6","arm_right_link7","arm_right_ft_link","arm_right_gripper_link","arm_right_eef_link","arm_right_link_eef","head_mount_link","head_link_base","head_link1","head_link2","head_link3","head_link4","head_link5","head_link6","head_link_eef","zed2i_holder_link","zed2i_base_link","zed2i_camera_center","zed2i_baro_link","zed2i_left_camera_frame","zed2i_left_camera_optical_frame","zed2i_temp_left_link","zed2i_mag_link","zed2i_right_camera_frame","zed2i_right_camera_optical_frame","zed2i_temp_right_link","zed2i_link","arm_left_controller_link","arm_right_controller_link","basket_link","trolley_back_link","trolley_local_link"};
const int link_parent_joint_idx[61] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60};
const double link_transform_translation_only[61][3] = {{0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.100000},
                                                       {-0.220000, -0.220000, 0.180000},
                                                       {1.860000, -0.238319, 0.683500},
                                                       {1.860000, -0.237319, 1.347500},
                                                       {1.860000, -0.237319, 2.011500},
                                                       {1.860000, -0.237319, 2.675500},
                                                       {1.815000, -0.237319, 1.347500},
                                                       {-0.720000, -0.220000, 0.180000},
                                                       {0.000000, 0.000000, 1.096900},
                                                       {-0.720000, 0.000000, 0.080000},
                                                       {0.350000, -0.100000, 0.000000},
                                                       {0.000000, 0.000000, 0.267000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, -0.293000, 0.000000},
                                                       {0.052500, 0.000000, 0.000000},
                                                       {0.077500, -0.342500, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.076000, 0.097000, 0.000000},
                                                       {0.000000, 0.000000, 0.022200},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.100000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {-0.350000, -0.100000, 0.000000},
                                                       {0.000000, 0.000000, 0.267000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, -0.293000, 0.000000},
                                                       {0.052500, 0.000000, 0.000000},
                                                       {0.077500, -0.342500, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.076000, 0.097000, 0.000000},
                                                       {0.000000, 0.000000, 0.022200},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.080000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.080000, 0.400000},
                                                       {0.005657, 0.000000, -0.005657},
                                                       {0.000000, 0.000000, 0.243300},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.200000, 0.000000, 0.000000},
                                                       {0.087000, -0.227600, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.061500, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {-0.015000, 0.000000, 0.054000},
                                                       {0.000000, 0.000000, 0.015000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.060000, 0.000000},
                                                       {-0.010000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, -0.060000, 0.000000},
                                                       {-0.010000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.044000},
                                                       {-0.125000, 0.000000, 0.080000},
                                                       {-1.315000, 0.000000, 0.080000},
                                                       {-1.240000, -0.295000, 0.140000},
                                                       {-0.720000, 0.260000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000}};
const double link_transform_quaternion_only[61][4] = {{1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707105, 0.000000, 0.000000, 0.707108},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {0.707107, 0.000000, 0.000000, 0.707107},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707107, 0.000000, 0.000000, -0.707107},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707107, 0.000000, 0.000000, -0.707107},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.923880, 0.000000, 0.000000, -0.382683},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707107, 0.000000, 0.000000, -0.707107},
                                                      {0.923880, 0.000000, 0.382683, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.500004, -0.499998, -0.500002, -0.499996},
                                                      {0.000003, 0.707105, 0.707108, 0.000003},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.923880, 0.000000, 0.000000, 0.382683},
                                                      {0.000000, 0.707107, 0.000000, 0.707107},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.500000, -0.500000, 0.500000, -0.500000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.500000, -0.500000, 0.500000, -0.500000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.000000, 0.707107, 0.000000, 0.707107},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.000000, 1.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.000000, 0.000000, 0.000000, 1.000000}};
const int link_can_skip_translation[61] = {1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,0,1,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,1}; // bool
const int link_can_skip_rotation[61] = {1,0,1,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,0,1,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,1,0,1,1,0,1,0}; // bool

// ACM
const int acm[61][61]= {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

// Objective weights
const double weight_preferred_joint_position_goal[61] = {};

// Collision objects info
const double object_transform_translation_only[62][3] = {{0.000000, 0.000000, 0.040000},
                                                         {0.100000, 0.000000, -0.100000},
                                                         {0.200000, 0.000000, -0.200000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, -0.075000},
                                                         {0.000000, 0.000000, 0.050000},
                                                         {0.000000, 0.000000, 0.100000},
                                                         {0.065000, 0.000000, 0.100000},
                                                         {0.130000, 0.000000, 0.100000},
                                                         {0.195000, 0.000000, 0.100000},
                                                         {0.195000, 0.000000, 0.050000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.045000, 0.000000, 0.000000},
                                                         {0.090000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, -0.160000},
                                                         {0.000000, 0.000000, -0.100000},
                                                         {0.000000, -0.050000, -0.100000},
                                                         {0.000000, -0.050000, -0.050000},
                                                         {0.000000, -0.050000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {-0.030000, 0.030000, 0.050000},
                                                         {0.030000, -0.030000, 0.050000},
                                                         {0.000000, 0.000000, 0.050000},
                                                         {0.000000, 0.000000, 0.150000},
                                                         {0.000000, 0.000000, 0.255000},
                                                         {0.000000, -0.100000, 0.080000},
                                                         {0.000000, 0.000000, 0.080000},
                                                         {0.000000, -0.100000, 0.000000},
                                                         {0.000000, -0.150000, 0.000000},
                                                         {0.052500, 0.030000, 0.000000},
                                                         {0.052500, -0.065000, 0.000000},
                                                         {0.000000, 0.000000, -0.060000},
                                                         {0.080000, -0.090000, 0.000000},
                                                         {0.080000, -0.090000, 0.060000},
                                                         {0.080000, -0.170000, 0.000000},
                                                         {0.040000, -0.045000, 0.070000},
                                                         {0.000000, 0.050000, 0.000000},
                                                         {0.000000, 0.040000, -0.080000},
                                                         {0.000000, 0.000000, 0.020000},
                                                         {0.080000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.100000},
                                                         {0.000000, 0.000000, 0.050000},
                                                         {0.000000, 0.000000, 0.150000},
                                                         {0.000000, 0.000000, 0.255000},
                                                         {0.000000, -0.100000, 0.080000},
                                                         {0.000000, 0.000000, 0.080000},
                                                         {0.000000, -0.100000, 0.000000},
                                                         {0.000000, -0.150000, 0.000000},
                                                         {0.052500, 0.030000, 0.000000},
                                                         {0.052500, -0.065000, 0.000000},
                                                         {0.000000, 0.000000, -0.060000},
                                                         {0.080000, -0.090000, 0.000000},
                                                         {0.080000, -0.090000, 0.060000},
                                                         {0.080000, -0.170000, 0.000000},
                                                         {0.040000, -0.045000, 0.070000},
                                                         {0.000000, 0.050000, 0.000000},
                                                         {0.000000, 0.040000, -0.080000},
                                                         {0.000000, 0.000000, 0.020000},
                                                         {0.080000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.100000}};
const double object_transform_quaternion_only[62][4] = {{1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000}};
const int object_can_skip_translation[62] = {0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0}; // bool
const int object_can_skip_rotation[62] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}; // bool

// Collision Objects Function
const double default_inflation = 0.075;
static inline std::vector<CollisionObject*> getRobotCollisionObjects(double inflation = 0.0)
{
  std::vector<CollisionObject*> objects;

  objects.reserve(62);
  objects.push_back( inflatedCollisionObject(Sphere(0.1), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.1), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.1), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.06), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.06), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.06), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.06), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.06), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.06), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );

  return objects;
}

// Collision Constraint Function
inline static void setProblemConstraints(ceres::Problem &problem, double *targets_ptr, double *targets_init)
{
}

// Solver Options
static inline void setSolverOptions(ceres::Solver::Options &options)
{
  options.eta = DBL_MIN;
  options.function_tolerance = DBL_MIN;
  options.gradient_tolerance = DBL_MIN;
  options.jacobi_scaling = true;
  options.linear_solver_type = DENSE_QR;
  options.max_num_iterations = 999;
  options.max_solver_time_in_seconds = 0.01;
  options.minimizer_progress_to_stdout = false;
  options.minimizer_type = TRUST_REGION;
  options.parameter_tolerance = DBL_MIN;
}

} // namespace robot

#endif // __AUTOGENERATED_ROBOT_CONFIGURATION__
