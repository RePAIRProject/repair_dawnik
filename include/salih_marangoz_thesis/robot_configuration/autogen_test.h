#ifndef __AUTOGENERATED_ROBOT_CONFIGURATION__
#define __AUTOGENERATED_ROBOT_CONFIGURATION__

#include <vector>
#include <string>
#include <Eigen/Dense>
#include <ceres/ceres.h>
#include <hpp/fcl/shape/geometric_shapes.h>

using namespace ceres;

using hpp::fcl::CollisionObject;
// supported collision shapes:
using hpp::fcl::Box;
using hpp::fcl::Sphere;
using hpp::fcl::Capsule;
using hpp::fcl::Cylinder;
using hpp::fcl::Plane;

namespace robot
{

// Util
template<typename T>
CollisionObject* inflatedCollisionObject(const T &shape, double inflation)
{
  return new CollisionObject(std::make_shared<T>(shape.inflated(inflation).first));
}

// Constants
const int endpoint_link_idx = 33;
const int num_joints = 39;
const int num_variables = 20;
const int num_links = 39;
const int num_objects = 27;
const int num_acm_link_pairs = 136;
const int num_targets = 6;

// Mapping vectors
const int joint_idx_to_variable_idx[39] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,6,-1,-1,7,8,9,10,11,12,13,-1,-1,14,15,16,17,18,19,-1,-1,-1,-1,-1,-1}; // -1 if no variable available. Can be used as joint_has_variable vector
const int variable_idx_to_joint_idx[20] = {9,10,11,12,13,14,15,18,19,20,21,22,23,24,27,28,29,30,31,32};
const int joint_idx_to_target_idx[39] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1,2,3,4,5,-1,-1,-1,-1,-1,-1};
const int target_idx_to_joint_idx[6] = {27,28,29,30,31,32};
const int object_idx_to_link_idx[27] = {26,27,28,29,30,31,32,8,8,8,10,10,13,13,14,14,15,17,17,17,19,19,22,22,23,23,24};

// Joint info
const std::string joint_names[39] = {"ASSUMED_FIXED_ROOT_JOINT","base_link_joint","base_link_to_cam0","base_link_to_cam1","base_link_to_cam2","base_link_to_cam3","base_link_to_platform","arm_holder_joint","arm_left_world_joint","arm_left_joint1","arm_left_joint2","arm_left_joint3","arm_left_joint4","arm_left_joint5","arm_left_joint6","arm_left_joint7","arm_left_joint_eef","arm_right_world_joint","arm_right_joint1","arm_right_joint2","arm_right_joint3","arm_right_joint4","arm_right_joint5","arm_right_joint6","arm_right_joint7","arm_right_joint_eef","head_world_joint","head_joint1","head_joint2","head_joint3","head_joint4","head_joint5","head_joint6","head_joint_eef","head_link_eef_camera_d405-link_fixed_joint","head_camera_d405-link_camera_d405-depth_fixed_joint","head_link_eef_camera_d435i-link_fixed_joint","head_camera_d435i-link_camera_d435i-depth_fixed_joint","base_link_to_tracker"};
const int joint_child_link_idx[39] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38};
const int joint_parent_link_idx[39] = {-1,0,1,1,1,1,1,6,7,8,9,10,11,12,13,14,15,7,17,18,19,20,21,22,23,24,7,26,27,28,29,30,31,32,33,34,33,36,1}; // -1 if no link available
const int joint_is_position_bounded[39] = {0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0}; // bool
const double joint_max_position[39] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.110177,2.180000,3.110177,3.110177,3.110177,3.110177,3.110177,0.000000,0.000000,3.110177,2.180000,3.110177,3.110177,3.110177,3.110177,3.110177,0.000000,0.000000,3.141593,2.617990,5.235988,3.141593,2.164200,3.141593,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const double joint_min_position[39] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-3.110177,-2.180000,-3.110177,-0.110000,-3.110177,-1.750000,-3.110177,0.000000,0.000000,-3.110177,-2.180000,-3.110177,-0.110000,-3.110177,-1.750000,-3.110177,0.000000,0.000000,-3.141593,-2.617990,-0.061087,-3.141593,-2.164200,-3.141593,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const int joint_is_velocity_bounded[39] = {0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0}; // bool
const double joint_max_velocity[39] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,3.140000,3.140000,3.140000,3.140000,3.140000,3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const double joint_min_velocity[39] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,0.000000,0.000000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,0.000000,0.000000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,-3.140000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const int joint_is_acceleration_bounded[39] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; // bool
const double joint_max_acceleration[39] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};
const double joint_min_acceleration[39] = {0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};

// Link info
const std::string link_names[39] = {"world","base_link","camera0_link","camera1_link","camera2_link","camera3_link","platform_base","arm_holder_link","arm_left_link_base","arm_left_link1","arm_left_link2","arm_left_link3","arm_left_link4","arm_left_link5","arm_left_link6","arm_left_link7","arm_left_link_eef","arm_right_link_base","arm_right_link1","arm_right_link2","arm_right_link3","arm_right_link4","arm_right_link5","arm_right_link6","arm_right_link7","arm_right_link_eef","head_link_base","head_link1","head_link2","head_link3","head_link4","head_link5","head_link6","head_link_eef","head_camera_d405_link","head_camera_d405_color_optical_frame","head_camera_d435i_link","head_camera_d435i_color_optical_frame","tracker"};
const int link_parent_joint_idx[39] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38};
const double link_transform_translation_only[39][3] = {{0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {1.860000, -0.238319, 0.683500},
                                                       {1.860000, -0.237319, 1.347500},
                                                       {1.860000, -0.237319, 2.011500},
                                                       {1.860000, -0.237319, 2.675500},
                                                       {0.025734, 0.000458, 0.469001},
                                                       {0.650000, 0.000000, 0.100000},
                                                       {0.450000, 0.080000, 0.000000},
                                                       {0.000000, 0.000000, 0.267000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, -0.293000, 0.000000},
                                                       {0.052500, 0.000000, 0.000000},
                                                       {0.077500, -0.342500, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.076000, 0.097000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {-0.450000, 0.080000, 0.000000},
                                                       {0.000000, 0.000000, 0.267000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, -0.293000, 0.000000},
                                                       {0.052500, 0.000000, 0.000000},
                                                       {0.077500, -0.342500, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.076000, 0.097000, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.600000},
                                                       {0.000000, 0.000000, 0.243300},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.200000, 0.000000, 0.000000},
                                                       {0.087000, -0.227600, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.061500, 0.000000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.020000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {0.000000, 0.000000, 0.020000},
                                                       {0.000000, 0.000000, 0.000000},
                                                       {1.815000, -0.237319, 1.347500}};
const double link_transform_quaternion_only[39][4] = {{1.000000, 0.000000, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {0.500000, 0.500000, 0.500000, 0.500000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.000000, 0.000000, 0.000000, 1.000000},
                                                      {-0.382683, 0.000000, 0.000000, 0.923880},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.923880, 0.000000, 0.000000, -0.382683},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.707107, 0.000000, 0.000000, -0.707107},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.500004, -0.499998, -0.500002, -0.499996},
                                                      {0.000003, 0.707105, 0.707108, 0.000003},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, 0.707108, 0.000000, 0.000000},
                                                      {0.707105, -0.707108, 0.000000, 0.000000},
                                                      {1.000000, 0.000000, 0.000000, 0.000000},
                                                      {0.500000, -0.500000, -0.500000, -0.500000},
                                                      {0.500000, -0.500000, 0.500000, -0.500000},
                                                      {0.500000, -0.500000, -0.500000, -0.500000},
                                                      {0.500000, -0.500000, 0.500000, -0.500000},
                                                      {0.707107, 0.000000, 0.000000, 0.707107}};
const int link_can_skip_translation[39] = {1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,1,0}; // bool
const int link_can_skip_rotation[39] = {1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,0}; // bool

// ACM
const int acm[39][39]= {{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,1,1,1,0,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
                        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

// Collision objects info
const double object_transform_translation_only[27][3] = {{0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.050000},
                                                         {0.000000, 0.000000, 0.150000},
                                                         {0.000000, 0.000000, 0.250000},
                                                         {0.000000, -0.100000, 0.080000},
                                                         {0.000000, 0.000000, 0.080000},
                                                         {0.000000, 0.050000, 0.000000},
                                                         {0.000000, 0.040000, -0.080000},
                                                         {0.000000, 0.000000, 0.010000},
                                                         {0.080000, 0.000000, 0.010000},
                                                         {0.000000, 0.000000, 0.000000},
                                                         {0.000000, 0.000000, 0.050000},
                                                         {0.000000, 0.000000, 0.150000},
                                                         {0.000000, 0.000000, 0.250000},
                                                         {0.000000, -0.100000, 0.080000},
                                                         {0.000000, 0.000000, 0.080000},
                                                         {0.000000, 0.050000, 0.000000},
                                                         {0.000000, 0.040000, -0.080000},
                                                         {0.000000, 0.000000, 0.010000},
                                                         {0.080000, 0.000000, 0.010000},
                                                         {0.000000, 0.000000, 0.000000}};
const double object_transform_quaternion_only[27][4] = {{1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000},
                                                        {1.000000, 0.000000, 0.000000, 0.000000}};
const int object_can_skip_translation[27] = {1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1}; // bool
const int object_can_skip_rotation[27] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}; // bool

// Collision Objects Function
const double inflation = 0.075;
static inline std::vector<CollisionObject*> getRobotCollisionObjects()
{
  std::vector<CollisionObject*> objects;

  objects.reserve(27);
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.04), inflation) );
  objects.push_back( inflatedCollisionObject(Sphere(0.05), inflation) );

  return objects;
}

// Collision Constraint Function
inline static void setProblemConstraints(ceres::Problem &problem, double *targets_ptr, double *targets_init)
{
}

// Solver Options
static inline void setSolverOptions(ceres::Solver::Options &options)
{
  options.jacobi_scaling = true;
  options.linear_solver_type = DENSE_QR;
  options.max_solver_time_in_seconds = 0.01;
  options.minimizer_progress_to_stdout = false;
  options.minimizer_type = TRUST_REGION;
}

} // namespace robot

#endif // __AUTOGENERATED_ROBOT_CONFIGURATION__
